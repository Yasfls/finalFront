import db from "../models/index.js";
import { Op } from 'sequelize';
// Transa√ß√£o e Attachment s√£o os novos modelos, Category e User s√£o mantidos
const Transaction = db.Transaction;
const Attachment = db.Attachment; 
const Category = db.Category;
const User = db.User;
 
// üí∞ Implementa√ß√£o: Adicionar Transa√ß√£o (Receita/Despesa)
const addTransaction = async (req, res) => {
    // üîê Mass Assignment Defense: Whitelist dos campos permitidos
    const { type, amount, description, date, category_id } = req.body; 
    const user_id = req.user.id; // ID do usu√°rio do JWT (seguro)
 
    if (!['RECEITA', 'DESPESA'].includes(type) || !amount || !description || !date || !category_id) {
        return res.status(400).send("Dados inv√°lidos para a transa√ß√£o.");
    }
    // üìÅ Anexo
    const attachment_path = req.file ? req.file.path : null;
 
    try {
        const transaction = await Transaction.create({
            user_id: user_id,
            type: type,
            amount: parseFloat(amount),
            description: description,
            date: new Date(date),
            category_id: parseInt(category_id),
            // attachment_id ser√° preenchido ap√≥s criar o anexo
        });
 
        if (attachment_path) {
            const attachment = await Attachment.create({
                transaction_id: transaction.id_transaction,
                file_path: attachment_path,
                mimetype: req.file.mimetype,
            });
            // Atualiza a transa√ß√£o para linkar o anexo
            await transaction.update({ attachment_id: attachment.id_attachment });
        }
 
        res.status(201).send({
            message: `Transa√ß√£o (${type}) criada com sucesso.`,
            transactionId: transaction.id_transaction,
        });
        console.log(`Transa√ß√£o criada: ${transaction.description}`);
    } catch (error) {
        console.error("Erro ao criar transa√ß√£o:", error);
        res.status(500).send("Erro ao criar transa√ß√£o.");
    }
};
 
// üí∞ Implementa√ß√£o: Obter Saldo da Conta
const getAccountBalance = async (req, res) => {
    const user_id = req.user.id;
 
    try {
        const transactions = await Transaction.findAll({
            where: { user_id: user_id },
            attributes: ['type', 'amount'],
        });
 
        let balance = 0;
        transactions.forEach(t => {
            if (t.type === 'RECEITA') {
                balance += parseFloat(t.amount);
            } else if (t.type === 'DESPESA') {
                balance -= parseFloat(t.amount);
            }
        });
 
        res.status(200).json({ balance: balance.toFixed(2) });
    } catch (error) {
        console.error("Erro ao calcular saldo:", error);
        res.status(500).send("Erro ao calcular saldo.");
    }
};
 
// üí∞ Implementa√ß√£o: Obter Todas as Transa√ß√µes do Usu√°rio
const getAllUserTransactions = async (req, res) => {
    const user_id = req.user.id;
    try {
        const transactions = await Transaction.findAll({
            where: { user_id: user_id },
            include: [
                { model: Category, as: 'category', attributes: ['name'] },
                { model: Attachment, as: 'attachment', attributes: ['file_path'] }
            ],
            order: [['date', 'DESC']],
        });
        res.status(200).send(transactions);
    } catch (error) {
        console.error("Erro ao buscar transa√ß√µes:", error.message);
        res.status(500).send("Erro ao buscar transa√ß√µes.");
    }
};
 
const getSingleTransaction = async (req, res) => {
    const id = req.params.id;
    const user_id = req.user.id;
    try {
        // üîê Adicionado: Valida√ß√£o de Propriedade - Garante que o usu√°rio s√≥ acessa suas pr√≥prias transa√ß√µes
        const transaction = await Transaction.findOne({
            where: { id_transaction: id, user_id: user_id },
            include: [
                { model: Category, as: 'category', attributes: ['name'] },
                { model: Attachment, as: 'attachment', attributes: ['file_path'] }
            ],
        });
        if (!transaction) {
            return res.status(404).send("Transa√ß√£o n√£o encontrada ou acesso negado.");
        }
        res.status(200).send(transaction);
    } catch (error) {
        res.status(500).send("Erro ao buscar transa√ß√£o.");
    }
};
 
// üí∞ Implementa√ß√£o: Atualizar Transa√ß√£o
const updateTransaction = async (req, res) => {
    const id = req.params.id;
    const user_id = req.user.id;
    // üîê Mass Assignment Defense: Whitelist dos campos permitidos para atualiza√ß√£o
    const { type, amount, description, date, category_id } = req.body;
    // Constr√≥i o objeto de dados a partir da whitelist
    const updateData = {};
    if (type) updateData.type = type;
    if (amount) updateData.amount = parseFloat(amount);
    if (description) updateData.description = description;
    if (date) updateData.date = new Date(date);
    if (category_id) updateData.category_id = parseInt(category_id);
    // Adiciona valida√ß√£o de tipo de transa√ß√£o se presente
    if (updateData.type && !['RECEITA', 'DESPESA'].includes(updateData.type)) {
        return res.status(400).send("Tipo de transa√ß√£o inv√°lido.");
    }
 
    try {
        // üîê Adicionado: Valida√ß√£o de Propriedade e Mass Assignment Protection
        const [updatedRows] = await Transaction.update(updateData, { 
            where: { 
                id_transaction: id, 
                user_id: user_id 
            } 
        });
 
        if (updatedRows === 0) {
            return res.status(404).send("Transa√ß√£o n√£o encontrada ou acesso negado.");
        }
        res.status(200).send(`Transa√ß√£o ${id} atualizada com sucesso.`);
    } catch (error) {
        console.error("Erro ao atualizar transa√ß√£o:", error.message);
        res.status(500).send("Erro ao atualizar transa√ß√£o.");
    }
};
 
// üí∞ Implementa√ß√£o: Deletar Transa√ß√£o
const deleteTransaction = async (req, res) => {
    const id = req.params.id;
    const user_id = req.user.id;
    try {
        // 1. Deletar Anexos (se houver) - (Opcional: implementar limpeza do arquivo f√≠sico)
        await Attachment.destroy({ where: { transaction_id: id } });
 
        // 2. üîê Adicionado: Valida√ß√£o de Propriedade
        const deletedRows = await Transaction.destroy({ 
            where: { 
                id_transaction: id, 
                user_id: user_id 
            } 
        });
        if (deletedRows === 0) {
            return res.status(404).send("Transa√ß√£o n√£o encontrada ou acesso negado.");
        }
 
        res.status(200).send(`Transa√ß√£o deletada com sucesso: ${id}`);
    } catch (error) {
        console.error("Erro ao deletar transa√ß√£o:", error.message);
        res.status(500).send("Erro ao deletar transa√ß√£o.");
    }
};
 
export default {
    addTransaction,
    getAccountBalance,
    getAllUserTransactions,
    getSingleTransaction,
    updateTransaction,
    deleteTransaction,
};